version: '3'

services:
  spark-master:
    image: docker.io/bitnami/spark:3.5
    container_name: spark-master
    hostname: spark-master
    environment:
      - SPARK_MODE=master
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
    volumes:
      - ./data/apps:/spark-apps
      - ./data/data:/spark-data
      - ./data/jars:/spark-jars
    ports:
      - '8080:8080'
    networks:
      - services

  spark-worker:
    image: docker.io/bitnami/spark:3.5
    container_name: spark-worker
    hostname: spark-worker
    environment:
      - SPARK_MODE=worker
      - SPARK_MASTER_URL=spark://spark-master:7077
      - SPARK_WORKER_MEMORY=1G
      - SPARK_WORKER_CORES=2
      - SPARK_EXECUTOR_MEMORY=512M
      - SPARK_RPC_AUTHENTICATION_ENABLED=no
      - SPARK_RPC_ENCRYPTION_ENABLED=no
      - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
      - SPARK_SSL_ENABLED=no
      - SPARK_USER=spark
      - SPARK_LOCAL_IP=0.0.0.0
    volumes:
      - ./data/apps:/spark-apps
      - ./data/data:/spark-data
      - ./data/jars:/spark-jars

    ports:
      - "8081:8081"
    networks:
      - services

  # spark-worker2:
  #   image: docker.io/bitnami/spark:3.5
  #   container_name: spark-worker2
  #   hostname: spark-worker2
  #   environment:
  #     - SPARK_MODE=worker
  #     - SPARK_MASTER_URL=spark://spark-master:7077
  #     - SPARK_WORKER_MEMORY=1G
  #     - SPARK_WORKER_CORES=2
  #     - SPARK_EXECUTOR_MEMORY=512M
  #     - SPARK_RPC_AUTHENTICATION_ENABLED=no
  #     - SPARK_RPC_ENCRYPTION_ENABLED=no
  #     - SPARK_LOCAL_STORAGE_ENCRYPTION_ENABLED=no
  #     - SPARK_SSL_ENABLED=no
  #     - SPARK_USER=spark
  #     - SPARK_LOCAL_IP=0.0.0.0
  #   ports:
  #     - "8082:8082"
  #   volumes:
  #     - ./data/apps:/spark-apps
  #     - ./data/data:/spark-data
  #     - ./data/jars:/spark-jars
  #   networks:
  #     - services

  # postgres-server:
  #   container_name: ${CONTAINER_NAME:-postgres-server}
  #   hostname: ${CONTAINER_NAME:-postgres-server}
  #   image: postgres:${PG_VERSION:-14-alpine}
  #   volumes:
  #     - ./${PG_DATA_FOLDER:-data/postgres/mta_data}:/var/lib/postgresql/data
  #     - ./data/postgres:/data
  #   environment:
  #     - POSTGRES_PASSWORD=${DB_PASS:-nikamooz123}
  #     - POSTGRES_USER=${DB_USER:-nikamooz}
  #     - POSTGRES_DB=${DB_NAME:-mta_data}
  #   networks:
  #     - services
  #   ports:
  #     - ${PORT:-5432}:5432
  jupyter:
    container_name: pyspark
    hostname: pyspark
    build:
      context: .
      dockerfile: Dockerfile.pyspark
    environment:
      - SPARK_MASTER=spark://spark-master:7077
    ports:
      - '8888:8888'
      - '4040-4050:4040-4050'
    volumes:
      - ./data/apps:/spark-apps
      - ./data/data:/spark-data
      - ./notebooks:/home/jovyan/work
      - ./data/jars:/spark-jars

    networks:
      - services
  zookeeper:
    image: confluentinc/cp-zookeeper:${CP_VERSION:-latest}
    hostname: kafka-zookeeper
    container_name: kafka-zookeeper
    ports:
      - "2182:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - services
    restart: on-failure:10
    # restart: always
    # chown -R 1000:1000 ./zoo
    # volumes: 
    #   - ./kafka_volume/zoo/data:/var/lib/zookeeper/data:z
    #   - ./kafka_volume/zoo/log:/var/lib/zookeeper/log:z

  broker:
    image: confluentinc/cp-kafka:${CP_VERSION:-latest}
    hostname: kafka-broker
    container_name: kafka-broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'kafka-zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: EXTERNAL:PLAINTEXT,INTERNAL:PLAINTEXT
      # if you want to use this image in your local machine :
      #   - add this line to your /etc/hosts file -> 127.0.0.1 kafka-broker  
      # if you want to use this image in a remote server you must do the followings : 
      # 1- change localhost in the following line to the valid IP address of your remote server.
      # 2- add this line to your /etc/hosts file in the remote server -> 127.0.0.1 kafka-broker  
      # AWS : https://rmoff.net/2018/08/02/kafka-listeners-explained/
      KAFKA_ADVERTISED_LISTENERS: EXTERNAL://localhost:9092,INTERNAL://kafka-broker:29092
      KAFKA_LISTENERS: EXTERNAL://:9092,INTERNAL://:29092
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: kafka-broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
    networks:
      - services
    # restart: always
    restart: on-failure:10

    # chown -R 1000:1000 ./broker
    # volumes: 
    #   - ./kafka_volume/broker/data:/var/lib/kafka/data:z

  kafkaHQ:
    image: tchiotludo/akhq
    container_name: kafkaHQ
    hostname: kafkaHQ
    depends_on:
      - broker
      # - schema-registry
    ports :
      - 9100:8080
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka-broker:29092"
       #       schema-registry:
       #         url: "http://schema-registry:9081"  
       # connect:
       #   - name: "connect"
       #     url: "http://connect:8083"
    networks:
      - services
    restart: always

networks: 
  services:
    name: ${APP_NAME:-ut}_network
